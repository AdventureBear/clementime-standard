html(ng-app="clementineJS")
	head
		title clementine.js - A lightweight MEAN stack boilerplate.
		link(type="text/css" rel="stylesheet" href="public/css/main.css")
	body(ng-controller="linkCtrlr")
		.navbar
			h1
				a.nav-logo(href="/")
			ul.nav
				li(material-ripple="")
					a.nav-button(href="#about_location" ng-click="delayLinkNav($event)") ABOUT
				li(material-ripple="")
					a.nav-button(href="#demo_location") DEMO
				li(material-ripple="")
					a.nav-button(href="#features_location") FEATURES
				li(material-ripple="")
					a.nav-button(href="/") DOCS

		.banner
			.banner-background
				.title
					img.logo(src="public/img/clementine_white.png")
					.clemjs clementine.js
							p A lightweight MEAN boilerplate.

							.buttons
								a.twitter(href="https://twitter.com/johnstonbl01" material-ripple="" ng-click="delayLink($event)")
									img(src="public/img/twitter_logo_32x26.png")
								a.github(href="https://github.com/johnstonbl01/clementinejs" target="_blank" material-ripple="" ng-click="delayLink($event)")
									img(src="public/img/github_32px.png")
								a.email(href="mailto:johnstonbl01@gmail.com" target="_blank" material-ripple="" ng-click="delayLink($event)")
									img(src="public/img/mail_32x28.png")
		.content
			
			.divider

			.container

				.about
					.textcontent#about_location 
						h3.headline About Clementine.js
							p
								| Clementine.js started as a personal project to create boilerplate that would help me easily stand up
								| a new project using the MEAN stack (MongoDB, Express, Angular.js & Node.js). As a novice, I found
								| that other boilerplates were often too feature-rich and contained a lot of overhead.
								br
								br
								| The purpose of Clementine.js is to provide a lightweight boilerplate for projects where the developer
								| wishes to perform most of the integration himself without having to remove many (or any) features.
								br
								br
								| Currently, Clementine.js is relatively simple and lacks a few essential features: linting & tests to name
								| a few. However, I believe that it can be a great start for many beginner-level projects. Over the course
								| of the next several months, Clementine.js will evolve to include the missing features and offer a rich, 
								| but still lightweight boilerplate for MEAN projects.
					
					.textcontent
						h3.headline Easy to Start, Great for Beginners
							.textcontent
								p
									| Get started with development quickly by cloning the repo. The underpinnings of the MEAN stack are already
									| configured and ready to use! If you're a beginner, Clementine.js offers an easy-to-understand structure
									| for building your first application. Feel free to contact me directly with any questions.
					
					.textcontent
						h3.headline Community-Driven
							.textcontent
								p
									| Clementine.js is developed in the open, and the repo is available on GitHub. Contribution and community
									| will help to take Clementine.js to the next level.

				.demo#demo_location
					h3.headline Demonstration
						p
							| Below is a simple demonstration of the MEAN stack using a sample comment section.

					.comments(ng-controller="commentCtrlr")

						ul.commentlist
							li(ng-repeat="comment in comments")
								p "{{comment.comments}}"
								p - {{comment.email}}
						
						form(ng-submit="createComment()").newcomment
							input(type="text" ng-model="commentEmail" placeholder="email address")
							input(type="text" ng-model="commentBody" placeholder="comment")
							button(type="submit") Save Comment
							button(type="submit" ng-click="deleteComments()") Delete All Comments

				.features#features_location
					h3.headline Features
						p
							| Clementine.js features utilizes a few libraries to make your development life easier, and
							| features a fully integrated build system via Gulp.js.
							br
				.libraries

					.libraries-row-one
						a.mongodb(href="http://www.mongodb.com/" target="_blank")
							img(src="public/img/mongodb_logo.png")
						a.express(href="http://expressjs.com/" target="_blank")
							p Express
						a.angularjs(href="https://angularjs.org/" target="_blank")
							img(src="public/img/angular_logo.png")
						a.nodejs(href="https://nodejs.org/" target="_blank")
							img(src="public/img/node_logo.svg")
					.libraries-row-two
						a.gulpjs(href="http://gulpjs.com/" target="_blank")
							img(src="public/img/gulp_logo.svg")
						a.jade(href="http://jade-lang.com/" target="_blank")
							img(src="public/img/jade_logo.png")
						a.mongoose(href="http://mongoosejs.com/" target="_blank")
							p mongoose
						a.bower(href="http://bower.io/" target="_blank")
							img(src="public/img/bower_logo.png")
							p Bower


		script(type="text/javascript" src="/public/lib/angular/angular.min.js")
		script(type="text/javascript" src="/public/lib/angular-resource/angular-resource.min.js")
		script(type="text/javascript" src="/public/application.js")
		script(type="text/javascript" src="/directives/materialRipple.js")
		script(type="text/javascript" src="/controllers/commentCtrlr.client.js")
		script(type="text/javascript" src="/controllers/linkCtrlr.client.js")